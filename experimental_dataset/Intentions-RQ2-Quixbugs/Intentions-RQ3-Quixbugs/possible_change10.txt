The code is meant to solve the "Making Change" problem in computer science, where we have to find the total number of possible combinations to make a given total currency value using a given set of coin denominations. The function `possible_change` takes two inputs - a `coins` list and a `total` integer. It uses recursive calls to return the total number of ways in which the `total` amount can be achieved using denominations of coins provided in the `coins` list.

The function first checks if `total` value is zero, in which case we have found a valid combination and return 1. If `total` value is negative, we have gone over the required amount so we don't count this combination and return 0. If both the previous conditions are not met, we use the first value of the `coins` list and recursively call the `possible_change` function by subtracting the first value of `coins` from `total`, and then by using the remaining list of coins `rest` and keeping the `total` value unchanged. Finally, we add the results of both recursive calls to get the total number of valid combinations.