The function `max_sublist_sum(arr)` takes a list of integers `arr` as input and returns the maximum sum of any contiguous subarray in the list. 

It uses a well-known algorithm for solving this problem, which works by iterating over the list and keeping track of two variables: `max_ending_here` and `max_so_far`. `max_ending_here` is the maximum sum of any sublist ending at the current position, and `max_so_far` is the maximum sum seen so far in the iteration. 

For each element in the list, the function adds it to `max_ending_here` and updates `max_so_far` if necessary. If `max_ending_here` becomes negative, it is reset to zero (since any sublist with negative sum can be discarded). 

Finally, the function returns the value of `max_so_far`, which represents the maximum sum of any sublist in the list. The time complexity of this algorithm is O(n), where n is the length of the input list `arr`.