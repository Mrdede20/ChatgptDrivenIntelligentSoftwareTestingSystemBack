The intention of this code is to provide an efficient algorithm for finding the maximum sum of contiguous subarrays within a given array. 

The algorithm works by iterating through the array and keeping track of the maximum subarray sum seen so far, as well as the maximum subarray sum that ends at the current index. 

At each iteration, the maximum ending at the current index is computed by adding the current element to the maximum sum seen so far. If this number is negative, it means that the current element alone gives a larger sum than the sum so far, so the maximum ending here is reset to zero. On the other hand, if the maximum ending here is positive, it continues to accumulate the sum of the elements of the current subarray. 

Finally, the maximum sum seen so far is updated to be the maximum value seen either so far or ending at the current index. By the end of the loop, the maximum subarray sum is the value returned. 

The example provided uses the function `max_sublist_sum` to find the maximum subarray sum of the given list `[4, -5, 2, 1, -1, 3]`, which is `5`.