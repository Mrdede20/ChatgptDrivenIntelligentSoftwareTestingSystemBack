Test Case:

```
weight_by_edge = { 
    (0, 1): -1,
    (0, 2): 4,
    (1, 2): 3,
    (1, 3): 2,
    (1, 4): 2,
    (3, 1): 1,
    (4, 3): -3,
}
source = 0

result = shortest_paths(source, weight_by_edge)

assert result == {
    0: 0,
    1: -1,
    2: 2,
    3: -2,
    4: 1,
}
```

Bug description:

The algorithm is expected to compute the shortest paths from the source node to all other nodes in a directed graph represented by the `weight_by_edge` dictionary. However, in the given test case, the computed shortest path to node 3 is -2 instead of -3. This happens because the node-4-to-node-3 edge has a negative weight (-3), which create a "negative cycle" in the graph, causing the algorithm to fail to converge to the correct shortest path solution.

Note: A negative cycle refers to a cycle of edges that have negative weight when summed up, and it is a well-known issue in shortest path algorithms. To fix this issue, we need to detect and report such cycles (e.g., by raising an exception), or use specialized algorithms that can handle negative cycles (e.g., the Bellman-Ford algorithm).
