Test Case:
------------
source = 'A'
weight_by_edge = {
    ('A', 'B'): 3,
    ('B', 'C'): 4,
    ('C', 'D'): -10,
    ('D', 'E'): 2,
    ('E', 'F'): 5,
    ('F', 'A'): 1,
    ('A', 'G'): 2
}

Expected Output:
-----------------
{
    'A': 0,
    'B': 3,
    'C': 7,
    'D': -3,
    'E': -1,
    'F': 4,
    'G': 2
}

Explanation:
-------------
This program implements the famous Bellman-Ford algorithm for finding the shortest paths from a source node to all other nodes in a weighted graph. The algorithm works by relaxing the edges repeatedly until no further improvements can be made. However, if the graph contains any negative weight cycles, then the algorithm fails to converge and enters an infinite loop.

The given test case is designed to trigger such a bug in the program. Here, the graph contains a negative weight cycle 'F->A->B->C->D->E->F' with a total weight of -1. When the program tries to relax all the edges for the 6th time, it will update the weight of node F to -1, which is less than its previous value of 4. As a result, the program will keep running in an infinite loop, updating the weights of nodes A, B, C, D, and E repeatedly.

Expected Failure:
------------------
The program should detect the presence of a negative cycle in the graph and report an error or raise an exception, instead of going into an infinite loop. Therefore, the test case should fail and indicate that the program is not handling negative cycles correctly.
