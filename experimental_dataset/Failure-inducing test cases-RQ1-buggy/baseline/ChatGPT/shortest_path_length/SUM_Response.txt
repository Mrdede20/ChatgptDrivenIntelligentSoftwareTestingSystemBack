#IT
length_by_edge = {(1, 2): 5, (2, 3): 10, (3, 4): 5, (2, 4): 15}
startnode = Node(value=1)
goalnode = Node(value=4)
node1 = startnode
node2 = Node(value=2)
node3 = Node(value=3)
node4 = goalnode
node1.successors = [node2]
node2.successors = [node3, node4]
node3.successors = [node4]
result = shortest_path_length(length_by_edge, startnode, goalnode)
assert result == 20, f"Expected 20 but got {result}"

#IT
length_by_edge = {
    'A': {'B': 2},
    'B': {'A': 1, 'C': 3},
    'C': {'A': 4}
}
startnode = 'A'
goalnode = 'C'
A = Node(value='A', successors=['B'])
B = Node(value='B', successors=['C'], predecessors=['A'], incoming_nodes=['A'], outgoing_nodes=['C'])
C = Node(value='C', predecessors=['B'], incoming_nodes=['B'])
graph = {
    'A': A,
    'B': B,
    'C': C
}
assert shortest_path_length(length_by_edge, startnode, goalnode) == 5

#IT
length_by_edge = {
    (0, 1): 1,
    (1, 2): 2,
    (2, 3): 3,
    (3, 4): 4,
    (4, 0): 5
}
startnode = Node(0, successors=[Node(1)])
goalnode = Node(4, predecessors=[Node(3)])
result = shortest_path_length(length_by_edge, startnode, goalnode)
assert result == 5

#IT
graph = {
    'A': {'B': 2},
    'B': {'C': 1},
    'C': {}
}
startnode = 'A'
goalnode = 'C'
length_by_edge = {}
for node in graph:
    for successor, length in graph[node].items():
        length_by_edge[(node, successor)] = length
result = shortest_path_length(length_by_edge, startnode, goalnode)
assert result == 3, f"Test Failed: Expected 3 but got {result}"

#FF
length_by_edge = {
(1, 2): 2,
(2, 3): 3,
(3, 4): 4,
(4, 5): 5,
(1, 5): 10
}
start_node = Node(1, [Node(2)])
goal_node = Node(5, [], [Node(1), Node(4)])
result = shortest_path_length(length_by_edge, start_node, goal_node)
assert result == 7 #error inf

#IT
length_by_edge = {(1, 2): 1, (2, 3): 2, (3, 4): 3}
startnode = Node(1)
goalnode = Node(4)
startnode.successors = [Node(2)]
Node(2).successors = [Node(3)]
Node(3).successors = [goalnode]
result = shortest_path_length(length_by_edge, startnode, goalnode)
assert result == 6, f"Test Case 1 Failed: Expected 6 but got {result}"

#IT
length_by_edge = {(1, 2): 5, (2, 3): 2, (1, 3): 20}
startnode = Node(value=1, successors=[Node(value=2)])
goalnode = Node(value=3, predecessors=[Node(value=2, successors=[Node(value=3)])])
assert shortest_path_length(length_by_edge, startnode, goalnode) == 7

#FF
A = Node('A')
B = Node('B')
C = Node('C')
A.successors = [B, C]
B.successors = [C]
length_by_edge = {(A, B): 1, (A, C): 0, (B, C): 1}
assert shortest_path_length(length_by_edge, A, C) == 1 #error 0

#FC
node1 = Node()
node2 = Node()
node3 = Node()
node4 = Node()
node5 = Node()
length_by_edge = {
    (node1, node2): 1,
    (node2, node1): 1,
    (node2, node3): 2,
    (node3, node2): 2,
    (node3, node4): 3,
    (node4, node3): 3,
    (node4, node5): 4,
    (node5, node4): 4
}
startnode = node1
goalnode = node5
node1.successors = [node2]
node2.successors = [node3]
node3.successors = [node4]
node4.successors = [node5]
assert shortest_path_length(length_by_edge, startnode, goalnode) == 8 #error 10

#FF
length_by_edge = {
    (1, 2): 1,
    (2, 3): 2,
    (3, 4): 3,
    (4, 2): 1,
}
startnode = Node(1, [Node(2)])
goalnode = Node(4)
assert shortest_path_length(length_by_edge, startnode, goalnode) == 4 #error inf


