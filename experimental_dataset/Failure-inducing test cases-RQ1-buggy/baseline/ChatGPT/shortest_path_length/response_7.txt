Test case that triggers a bug and results in test failure:

length_by_edge = {(1, 2): 5, (2, 3): 2, (1, 3): 20}
startnode = Node(value=1, successors=[Node(value=2)])
goalnode = Node(value=3, predecessors=[Node(value=2, successors=[Node(value=3)])])

assert shortest_path_length(length_by_edge, startnode, goalnode) == 7

Explanation:

In this test case, the shortest_path_length function receives a graph with three nodes and three edges. Node 1 is connected to node 2 with an edge of weight 5, node 2 is connected to node 3 with an edge of weight 2, and node 1 is connected to node 3 with an edge of weight 20. The start node is node 1, and the goal node is node 3.

The test case expects the function to return the shortest path length from the start node to the goal node, which is 7: the path 1 -> 2 -> 3 has a length of 5 + 2 = 7.

However, the function will fail the test case because of a bug: the get function returns 0 if the wanted node is not found in the heap, but this is not correct. If the node is not found, the correct value to return is float('inf'), because that represents an infinite distance between nodes. In this case, the get(unvisited_nodes, nextnode) or float('inf') expression will return 0 instead of float('inf'), causing the function to choose the wrong path and return a longer distance than expected.

To fix the bug, the get function should return float('inf') instead of 0 when the wanted node is not found in the heap.