Test case:

arr = [3, 2, 1, 4, 5, 6]
expected_output = [1, 2, 3, 4, 5, 6]

# The test should sort the array above, but it will generate an error 
# because the function is not properly handling duplicated values.

# The pivot element is always the first one in the array, so having duplicated 
# values can lead to the same value being present more than once in either the 
# "lesser" or "greater" arrays, which will cause an IndexError when trying to access
# the first element of the "lesser" or "greater" arrays.

# In this specific case, when the pivot is equal to 4, the "greater" list will be empty,
# but the "lesser" list will have two elements equal to 3. When "quicksort" is called 
# recursively with the "lesser" array, it will try to access the first element of
# the "lesser" array, which is the duplicate value 3, leading to the error.

# We can fix the bug by changing the "greater than" 
condition on line 5 to "greater or equal than".

# A possible solution is:

def quicksort(arr):
    if not arr:
        return []
    pivot = arr[0] 

    lesser = quicksort([x for x in arr[1:] if x < pivot])
    greater = quicksort([x for x in arr[1:] if x >= pivot])
    return lesser + [pivot] + greater


# The corrected function should now pass the test case above.