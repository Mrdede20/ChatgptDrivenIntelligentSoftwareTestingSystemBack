Test Case:

n = 3
length_by_edge = {
    (0, 1): 1,
    (1, 2): 2,
    (2, 0): 4
}

result = shortest_path_lengths(n, length_by_edge)
assert result[0, 2] == 3, f"Failed: {result[0, 2]}"

Explanation:

The above program implements the Floyd-Warshall algorithm to find the shortest path between all pairs of vertices in a weighted graph. The shortest_path_lengths function takes two arguments n and length_by_edge, where n is the number of vertices in the graph, and length_by_edge is a dictionary of edge lengths between pairs of vertices.

The test case creates a graph with three vertices and three edges. The edge weights are such that the shortest path between vertex 0 and vertex 2 is through vertex 1, with a total length of 3. However, due to a bug in the implementation, the program returns a length of 5 for this path.

The bug occurs because the program uses the wrong variable name in the calculation of the shortest path length. In the inner loop, the variable j should be replaced with k to correctly update the shortest path length between vertices i and j via the intermediate vertex k.