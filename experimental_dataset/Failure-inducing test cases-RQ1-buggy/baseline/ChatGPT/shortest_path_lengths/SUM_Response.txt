#FC
n = 3
length_by_edge = {
    (0, 1): 5,
    (1, 2): 3,
    (2, 0): 4
}
result = shortest_path_lengths(n, length_by_edge)
assert result[(0, 2)] == 7 #error 8

#FC
n = 4
length_by_edge = {
    (0, 1): 1,
    (1, 2): 1,
    (2, 3): 1,
    (3, 0): 1,
    (0, 2): 100,
    (1, 3): 100,
}
expected_output = {
    (0, 0): 0,
    (0, 1): 1,
    (0, 2): 2,
    (0, 3): 101,
    (1, 0): 101,
    (1, 1): 0,
    (1, 2): 1,
    (1, 3): 100,
    (2, 0): 100,
    (2, 1): 101,
    (2, 2): 0,
    (2, 3): 1,
    (3, 0): 1,
    (3, 1): 100,
    (3, 2): 101,
    (3, 3): 0,
}
assert shortest_path_lengths(n, length_by_edge) == expected_output #error {(0, 0): 0, (1, 1): 0, (2, 2): 0, (3, 3): 0, (0, 1): 1, (1, 2): 1, (2, 3): 
#1, (3, 0): 1, (0, 2): 2, (1, 3): 2, (0, 3): 3, (1, 0): 3, (2, 0): 2, (2, 1): 3, (3, 1): 2, (3, 2): 3}

#FC
n = 3
length_by_edge = {(0, 1): 1, (1, 2): 2, (0, 2): 3}
expected_output = {(0, 0): 0, (0, 1): 1, (0, 2): 3, (1, 0): 'inf', (1, 1): 0, (1, 2): 2, (2, 0): 'inf', (2, 1): 'inf', (2, 2): 0}
assert shortest_path_lengths(n, length_by_edge) == expected_output #error {(0, 0): 0, (1, 1): 0, (2, 2): 0, (0, 1): 1, (1, 2): 2, (0, 2): 3, (1, 0): 
#inf, (2, 0): inf, (2, 1): inf}

#FT
n = 4
length_by_edge = {(0, 1): 5, (1, 2): 10, (2, 3): 15}
expected_output = {(0, 0): 0, (0, 1): 5, (0, 2): 15, (0, 3): 30, (1, 0): float('inf'), (1, 1): 0, (1, 2): 10, (1, 3): 25, (2, 0): float('inf'), (2, 1): float('inf'), (2, 2): 0, (2, 3): 15, (3, 0): float('inf'), (3, 1): float('inf'), (3, 2): float('inf'), (3, 3): 0}
assert shortest_path_lengths(n, length_by_edge) == expected_output

#FT
n = 3
length_by_edge = {
    (0, 1): 1,
    (1, 2): 2,
    (2, 0): 4
}
result = shortest_path_lengths(n, length_by_edge)
assert result[0, 2] == 3, f"Failed: {result[0, 2]}"

#FC
n = 4
length_by_edge = {
    (0, 1): 1,
    (1, 2): 2,
    (2, 3): 3,
    (3, 1): -6
}
assert shortest_path_lengths(n, length_by_edge) == ValueError #error {(0, 0): 0, (1, 1): -1, (2, 2): -1, (3, 3): -2, (0, 1): 0, (1, 2): 1, (2, 3): 2, (3, 1): -7, (0, 2): 2, (0, 3): 5, (1, 0): inf, (1, 3): 4, (2, 0): inf, (2, 1): -3, (3, 0): inf, (3, 2): -5}


#FC
n = 4
length_by_edge = {(0, 1): 1, (1, 2): 2, (2, 3): 3, (3, 0): 4}
result = shortest_path_lengths(n, length_by_edge)
assert result[(0, 2)] == 6 #error 3

#FT
n = 4
length_by_edge = {
    (0, 1): 2,
    (0, 2): 1,
    (1, 3): 5,
    (2, 3): 3,
}
result = shortest_path_lengths(n, length_by_edge)
expected = {
    (0, 0): 0,
    (0, 1): 2,
    (0, 2): 1,
    (0, 3): 4,
    (1, 0): float('inf'),
    (1, 1): 0,
    (1, 2): float('inf'),
    (1, 3): 5,
    (2, 0): float('inf'),
    (2, 1): float('inf'),
    (2, 2): 0,
    (2, 3): 3,
    (3, 0): float('inf'),
    (3, 1): float('inf'),
    (3, 2): float('inf'),
    (3, 3): 0,
}
assert result == expected

#FT
n = 3
length_by_edge = {
    (0, 1): 1,
    (1, 2): 2,
    (2, 0): 4
}
result = shortest_path_lengths(n, length_by_edge)
assert result[(0, 2)] == 3, f"Expected 3 but got {result[(0, 2)]}"

#FT
n = 4
length_by_edge = {(0, 1): 2, (0, 2): 6, (1, 2): 3, (1, 3): 1, (2, 3): 5}
expected = {(0, 0): 0, (0, 1): 2, (0, 2): 5, (0, 3): 3, (1, 0): float('inf'), (1, 1): 0, (1, 2): 3, (1, 3): 1, (2, 0): float('inf'), (2, 1): float('inf'), (2, 2): 0, (2, 3): 5, (3, 0): float('inf'), (3, 1): float('inf'), (3, 2): float('inf'), (3, 3): 0}
result = shortest_path_lengths(n, length_by_edge)
assert result == expected