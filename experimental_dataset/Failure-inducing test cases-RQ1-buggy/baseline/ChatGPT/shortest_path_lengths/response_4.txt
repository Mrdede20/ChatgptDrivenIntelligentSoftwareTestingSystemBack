Test case:

n = 4
length_by_edge = {(0, 1): 5, (1, 2): 10, (2, 3): 15}

Expected output:

{(0, 0): 0, (0, 1): 5, (0, 2): 15, (0, 3): 30, (1, 0): float('inf'), (1, 1): 0, (1, 2): 10, (1, 3): 25, (2, 0): float('inf'), (2, 1): float('inf'), (2, 2): 0, (2, 3): 15, (3, 0): float('inf'), (3, 1): float('inf'), (3, 2): float('inf'), (3, 3): 0}

Bug description:

The program is supposed to calculate the shortest path lengths between all pairs of nodes in a graph. However, for certain inputs, it may fail to calculate the correct answer due to a bug in the implementation.

The above test case triggers a bug where the program returns incorrect output. The bug occurs because the program assumes that the graph is connected, i.e., there exists a path between any two nodes in the graph. However, in the above test case, there is no path between node 0 and node 2. Therefore, the program should return float('inf') for length_by_path[0,2], length_by_path[2,0], length_by_path[1,3], and length_by_path[3,1]. However, the program returns 15 for length_by_path[0,2] and 30 for length_by_path[2,0], which are incorrect.