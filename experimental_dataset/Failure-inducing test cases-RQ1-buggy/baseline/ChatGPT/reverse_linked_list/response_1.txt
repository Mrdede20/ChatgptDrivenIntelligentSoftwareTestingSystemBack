Here's a test case that could trigger a bug in the implementation:

```
node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)
node5 = Node(5)

node1.successor = node2
node2.successor = node3
node3.successor = node4
node4.successor = node5

reversed_list = reverse_linked_list(node1)

assert reversed_list == node5  # should be the last node in the original list
assert reversed_list.successor == node4
assert reversed_list.successor.successor == node3
assert reversed_list.successor.successor.successor == node2
assert reversed_list.successor.successor.successor.successor == node1
```

The test case creates a linked list of 5 nodes, with node1 being the head of the list and node5 being the tail. It then invokes the `reverse_linked_list()` function with node1 as the argument, and asserts that the function returns node5 as the new head of the reversed list. It also asserts that the successors of the new 
head node are the expected nodes from the original list in reversed order.

If there's a bug present in the implementation that causes the function to misbehave, the test case could fail. For example, if the function forgets to update `prevnode` at the end of the loop, or if it sets `node.successor` to `node` instead of `None`, it could result in incorrect output that wouldn't match the expected values in the assertions.