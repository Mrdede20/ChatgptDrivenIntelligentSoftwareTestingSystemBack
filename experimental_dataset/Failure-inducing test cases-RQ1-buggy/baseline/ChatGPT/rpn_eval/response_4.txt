Here's a test case that triggers a bug in the program and results in test failure:

# Test case
tokens = [5, 1, 2, '+', 4, '*', '+', 3, '-']
expected_output = 14

# Explanation
The input expression can be written in postfix notation as: "5 1 2 + 4 * + 3 -"
The evaluation should be done as follows:
    - Push 5 to the stack: [5]
    - Push 1 to the stack: [5, 1]
    - Push 2 to the stack: [5, 1, 2]
    - Pop 2 and 1, apply + operator, push result to stack: [5, 3]
    - Push 4 to the stack: [5, 3, 4]
    - Pop 4 and 3, apply * operator, push result to stack: [5, 12]
    - Pop 12 and 5, apply + operator, push result to stack: [17]
    - Push 3 to the stack: [17, 3]
    - Pop 3 and 17, apply - operator, push result to stack: [14]
The final result should be 14

However, the program fails to evaluate the expression correctly, and the output is 16 instead of 14.

# Test failure
assert rpn_eval(tokens) == expected_output, f"Error: expected {expected_output}, but got {rpn_eval(tokens)} instead."

The bug is in the op function. When subtracting the values in the expression, the order of the operands is reversed, causing the result to be incorrect.

To fix the bug, you can modify the op function to swap the order of a and b when the operator is -. Here's the modified code:

def op(symbol, a, b):
    if symbol == '-':
        return b - a
    return {
        '+': lambda a, b: a + b,
        '*': lambda a, b: a * b,
        '/': lambda a, b: a / b
    }[symbol](a, b)
