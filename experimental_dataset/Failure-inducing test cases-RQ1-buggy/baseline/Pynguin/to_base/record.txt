# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import to_base as module_0





#record_1
def test_case_0():

    bool_0 = True

    none_type_0 = None

    module_0.to_base(bool_0, none_type_0)





#record_2
def test_case_1():

    bool_0 = False

    var_0 = module_0.to_base(bool_0, bool_0)

    assert var_0 == ""

    none_type_0 = None

    module_0.to_base(none_type_0, none_type_0)





#record_3
def test_case_2():

    int_0 = 2990

    var_0 = module_0.to_base(int_0, int_0)

    assert var_0 == "01"

    var_1 = module_0.to_base(int_0, int_0)

    assert var_1 == "01"

    var_2 = module_0.to_base(int_0, int_0)

    assert var_2 == "01"

    module_0.to_base(var_1, int_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import to_base as module_0





#record_4
def test_case_0():

    int_0 = 3047

    var_0 = module_0.to_base(int_0, int_0)

    assert var_0 == "01"





#record_5
def test_case_1():

    bool_0 = False

    var_0 = module_0.to_base(bool_0, bool_0)

    assert var_0 == ""

    var_0.__missing__(var_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import to_base as module_0





#record_6
def test_case_0():

    float_0 = 885.25

    none_type_0 = None

    module_0.to_base(float_0, none_type_0)





#record_7
def test_case_1():

    int_0 = -1103

    var_0 = module_0.to_base(int_0, int_0)

    assert var_0 == ""





#record_8
def test_case_2():

    int_0 = 1265

    var_0 = module_0.to_base(int_0, int_0)

    assert var_0 == "01"

    bool_0 = True

    none_type_0 = None

    module_0.to_base(bool_0, none_type_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import to_base as module_0





#record_9
def test_case_0():

    int_0 = 4104

    var_0 = module_0.to_base(int_0, int_0)

    assert var_0 == "01"

    none_type_0 = None

    module_0.to_base(none_type_0, none_type_0)





#record_10
def test_case_1():

    bool_0 = False

    var_0 = module_0.to_base(bool_0, bool_0)

    assert var_0 == ""


