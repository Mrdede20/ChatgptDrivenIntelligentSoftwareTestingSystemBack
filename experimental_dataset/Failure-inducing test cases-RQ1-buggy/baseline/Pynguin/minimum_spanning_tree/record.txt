# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import minimum_spanning_tree as module_0

import builtins as module_1





#record_1
def test_case_0():

    bool_0 = True

    list_0 = [bool_0, bool_0, bool_0]

    module_0.minimum_spanning_tree(list_0)





#record_2
def test_case_1():

    object_0 = module_1.object()

    bytes_0 = b""

    var_0 = module_0.minimum_spanning_tree(bytes_0)





#record_3
def test_case_2():

    bool_0 = True

    list_0 = [bool_0]

    module_0.minimum_spanning_tree(list_0)





#record_4
def test_case_3():

    bool_0 = True

    tuple_0 = (bool_0, bool_0)

    dict_0 = {tuple_0: tuple_0, tuple_0: bool_0, bool_0: bool_0, bool_0: bool_0}

    module_0.minimum_spanning_tree(dict_0)





#record_5
def test_case_4():

    str_0 = '">'

    dict_0 = {str_0: str_0, str_0: str_0}

    module_0.minimum_spanning_tree(dict_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import minimum_spanning_tree as module_0





#record_6
def test_case_0():

    bool_0 = True

    list_0 = [bool_0, bool_0, bool_0]

    module_0.minimum_spanning_tree(list_0)





#record_7
def test_case_1():

    bytes_0 = b""

    var_0 = module_0.minimum_spanning_tree(bytes_0)

    bool_0 = True

    list_0 = [bool_0, bool_0, bool_0]

    module_0.minimum_spanning_tree(list_0)





#record_8
def test_case_2():

    str_0 = ".@i;\r#>#K_pI5S5|sV7"

    module_0.minimum_spanning_tree(str_0)





#record_9
def test_case_3():

    bytes_0 = b"+\xdc"

    dict_0 = {bytes_0: bytes_0}

    module_0.minimum_spanning_tree(dict_0)





#record_10
def test_case_4():

    bytes_0 = b"++"

    dict_0 = {bytes_0: bytes_0}

    var_0 = module_0.minimum_spanning_tree(dict_0)

    tuple_0 = ()

    var_1 = module_0.minimum_spanning_tree(tuple_0)

    tuple_1 = (var_1, var_0)

    module_0.minimum_spanning_tree(tuple_1)

