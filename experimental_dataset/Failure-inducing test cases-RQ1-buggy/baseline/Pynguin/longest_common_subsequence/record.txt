# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import longest_common_subsequence as module_0

import builtins as module_1





#record_1
def test_case_0():

    bool_0 = True

    module_0.longest_common_subsequence(bool_0, bool_0)





#record_2
def test_case_1():

    none_type_0 = None

    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)

    assert var_0 == ""





#record_3
def test_case_2():

    list_0 = []

    dict_0 = {}

    object_0 = module_1.object(*list_0, **dict_0)

    tuple_0 = ()

    none_type_0 = None

    var_0 = module_0.longest_common_subsequence(tuple_0, none_type_0)

    assert var_0 == ""

    var_1 = module_0.longest_common_subsequence(object_0, list_0)

    assert var_1 == ""





#record_4
def test_case_3():

    bytes_0 = b"\x91\xfcY"

    none_type_0 = None

    var_0 = module_0.longest_common_subsequence(none_type_0, bytes_0)

    assert var_0 == ""

    module_0.longest_common_subsequence(bytes_0, bytes_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import longest_common_subsequence as module_0





#record_5
def test_case_0():

    int_0 = -3210

    module_0.longest_common_subsequence(int_0, int_0)





#record_6
def test_case_1():

    bytes_0 = b"\x87td\x14y"

    list_0 = [bytes_0]

    var_0 = module_0.longest_common_subsequence(bytes_0, list_0)

    assert var_0 == ""

    module_0.longest_common_subsequence(bytes_0, bytes_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import longest_common_subsequence as module_0

import builtins as module_1





#record_7
def test_case_0():

    bool_0 = True

    module_0.longest_common_subsequence(bool_0, bool_0)





#record_8
def test_case_1():

    object_0 = module_1.object()

    none_type_0 = None

    var_0 = module_0.longest_common_subsequence(none_type_0, object_0)

    assert var_0 == ""

    module_0.longest_common_subsequence(object_0, object_0)





#record_9
def test_case_2():

    object_0 = module_1.object()

    none_type_0 = None

    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)

    assert var_0 == ""

    none_type_1 = None

    var_1 = module_0.longest_common_subsequence(none_type_1, none_type_1)

    assert var_1 == ""

    var_2 = module_0.longest_common_subsequence(none_type_1, var_1)

    assert var_2 == ""

    var_3 = module_0.longest_common_subsequence(object_0, none_type_1)

    assert var_3 == ""

    var_4 = module_0.longest_common_subsequence(none_type_1, none_type_1)

    assert var_4 == ""





#record_10
def test_case_3():

    bool_0 = False

    dict_0 = {bool_0: bool_0}

    module_0.longest_common_subsequence(dict_0, dict_0)



