# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import levenshtein as module_0





#record_1
def test_case_0():

    str_0 = "9q[Ipdc?["

    var_0 = module_0.levenshtein(str_0, str_0)

    assert var_0 == 9





#record_2
def test_case_1():

    bool_0 = False

    module_0.levenshtein(bool_0, bool_0)





#record_3
def test_case_2():

    str_0 = "EVd"

    str_1 = "|\rkof}bK\\h?8\n="

    var_0 = module_0.levenshtein(str_0, str_1)

    assert var_0 == 14

    str_2 = 'J.--@U5}5(D%m"ud'

    none_type_0 = None

    module_0.levenshtein(none_type_0, str_2)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import levenshtein as module_0





#record_4
def test_case_0():

    str_0 = "C"

    var_0 = module_0.levenshtein(str_0, str_0)

    assert var_0 == 1

    var_1 = module_0.levenshtein(str_0, str_0)

    assert var_1 == 1

    module_0.levenshtein(var_0, str_0)





#record_5
def test_case_1():

    bool_0 = True

    list_0 = [bool_0, bool_0, bool_0]

    module_0.levenshtein(list_0, list_0)





#record_6
def test_case_2():

    str_0 = "E\rJ@bVm"

    str_1 = "\rJ@bV"

    var_0 = module_0.levenshtein(str_1, str_0)

    assert var_0 == 7

    none_type_0 = None

    module_0.levenshtein(none_type_0, none_type_0)





#record_7
def test_case_3():

    str_0 = "lrrL>"

    str_1 = "\rJ@bV"

    var_0 = module_0.levenshtein(str_1, str_0)

    assert var_0 == 5

    none_type_0 = None

    module_0.levenshtein(str_0, none_type_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import levenshtein as module_0





#record_8
def test_case_0():

    str_0 = "cjnd"

    var_0 = module_0.levenshtein(str_0, str_0)

    assert var_0 == 4





#record_9
def test_case_1():

    int_0 = -438

    module_0.levenshtein(int_0, int_0)





#record_10
def test_case_2():

    bytes_0 = b"\x9a\xc0\xbc\xaf6\x98^J\xda\x11\xcf\x1c\xc70\x1f\x87/ "

    module_0.levenshtein(bytes_0, bytes_0)

