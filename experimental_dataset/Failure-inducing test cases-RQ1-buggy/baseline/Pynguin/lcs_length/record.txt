# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import lcs_length as module_0





#record_1
def test_case_0():

    str_0 = "j?:gKr]B\x0bI\rg"

    var_0 = module_0.lcs_length(str_0, str_0)

    assert var_0 == 1





#record_2
def test_case_1():

    list_0 = []

    none_type_0 = None

    var_0 = module_0.lcs_length(list_0, none_type_0)

    assert var_0 == 0


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import lcs_length as module_0





#record_3
def test_case_0():

    bytes_0 = b"\t\xbf\x82\x0e4"

    var_0 = module_0.lcs_length(bytes_0, bytes_0)

    assert var_0 == 1

    str_0 = "Y7%Y\x0bXNPio|6Bn"

    var_1 = module_0.lcs_length(str_0, bytes_0)

    assert var_1 == 0

    module_0.lcs_length(var_0, bytes_0)





#record_4
def test_case_1():

    set_0 = set()

    none_type_0 = None

    var_0 = module_0.lcs_length(set_0, none_type_0)

    assert var_0 == 0





#record_5
def test_case_2():

    float_0 = 1166.7964

    module_0.lcs_length(float_0, float_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import lcs_length as module_0





#record_6
def test_case_0():

    bytes_0 = b"q\x9eb\xbf\xdd\x81\xcc\x14\xe4\xdf\x85vr"

    var_0 = module_0.lcs_length(bytes_0, bytes_0)

    assert var_0 == 1





#record_7
def test_case_1():

    complex_0 = -439 + 2910.2j

    tuple_0 = (complex_0, complex_0)

    bytes_0 = b"\xfc\xb31\xfd\xd9b-\xfe\xa9\xad\x00E\x00\xa53'\xd3\xb0"

    tuple_1 = (tuple_0, bytes_0, bytes_0)

    var_0 = module_0.lcs_length(tuple_1, tuple_0)

    assert var_0 == 0

    module_0.lcs_length(var_0, tuple_1)





#record_8
def test_case_2():

    none_type_0 = None

    module_0.lcs_length(none_type_0, none_type_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import lcs_length as module_0





#record_9
def test_case_0():

    bytes_0 = b"\xd7\x8d\x1e\xaf\xe4<\x92\x81\t4\xc1\xd4\x10\x9d+)\x90~)\x1a"

    var_0 = module_0.lcs_length(bytes_0, bytes_0)

    assert var_0 == 1





#record_10
def test_case_1():

    tuple_0 = ()

    tuple_1 = (tuple_0,)

    var_0 = module_0.lcs_length(tuple_1, tuple_0)

    assert var_0 == 0


