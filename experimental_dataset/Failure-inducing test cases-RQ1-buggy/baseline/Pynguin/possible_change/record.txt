# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import possible_change as module_0





#record_1
def test_case_0():

    bool_0 = False

    var_0 = module_0.possible_change(bool_0, bool_0)

    assert var_0 == 1

    var_1 = module_0.possible_change(var_0, bool_0)

    assert var_1 == 1

    none_type_0 = None

    module_0.possible_change(none_type_0, var_0)





#record_2
def test_case_1():

    none_type_0 = None

    module_0.possible_change(none_type_0, none_type_0)





#record_3
def test_case_2():

    bool_0 = True

    bytes_0 = b"91\xce\xdd\x1a'\xfa\xc8n\x86\x12\t"

    module_0.possible_change(bytes_0, bool_0)





#record_4
def test_case_3():

    bool_0 = True

    none_type_0 = None

    module_0.possible_change(none_type_0, bool_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import possible_change as module_0

import builtins as module_1





#record_5
def test_case_0():

    bool_0 = False

    var_0 = module_0.possible_change(bool_0, bool_0)

    assert var_0 == 1

    var_1 = module_0.possible_change(var_0, bool_0)

    assert var_1 == 1

    object_0 = module_1.object()

    set_0 = {object_0, object_0, object_0}

    module_0.possible_change(object_0, set_0)





#record_6
def test_case_1():

    bytes_0 = b"N\xc8_<\x1b\xbey\xfc\x9a\xecT\xa4\x03\xa2"

    none_type_0 = None

    module_0.possible_change(bytes_0, none_type_0)





#record_7
def test_case_2():

    int_0 = -1748

    var_0 = module_0.possible_change(int_0, int_0)

    assert var_0 == 0

    bool_0 = True

    complex_0 = -1036.895458 + 88.9j

    module_0.possible_change(bool_0, complex_0)





#record_8
def test_case_3():

    bool_0 = True

    module_0.possible_change(bool_0, bool_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import possible_change as module_0





#record_9
def test_case_0():

    bool_0 = False

    var_0 = module_0.possible_change(bool_0, bool_0)

    assert var_0 == 1

    set_0 = set()

    module_0.possible_change(set_0, set_0)





#record_10
def test_case_1():

    none_type_0 = None

    module_0.possible_change(none_type_0, none_type_0)



