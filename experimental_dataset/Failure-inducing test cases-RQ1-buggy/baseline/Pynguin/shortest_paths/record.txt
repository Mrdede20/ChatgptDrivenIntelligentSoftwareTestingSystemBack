# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import shortest_paths as module_0





#record_1
def test_case_0():

    list_0 = []

    none_type_0 = None

    var_0 = module_0.shortest_paths(none_type_0, list_0)





#record_2
def test_case_1():

    str_0 = "wW W,6bmxJ"

    bytes_0 = b"\xa0k\xa1r\xc4\x1djqN|"

    module_0.shortest_paths(str_0, bytes_0)





#record_3
def test_case_2():

    bytes_0 = b"v\x11"

    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}

    none_type_0 = None

    module_0.shortest_paths(none_type_0, set_0)





#record_4
def test_case_3():

    str_0 = ""

    var_0 = module_0.shortest_paths(str_0, str_0)

    tuple_0 = (str_0, str_0)

    var_1 = module_0.shortest_paths(tuple_0, str_0)

    var_2 = module_0.shortest_paths(tuple_0, var_1)

    var_3 = module_0.shortest_paths(str_0, str_0)

    var_4 = module_0.shortest_paths(str_0, str_0)

    module_0.shortest_paths(var_3, var_3)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import shortest_paths as module_0





#record_5
def test_case_0():

    str_0 = ""

    var_0 = module_0.shortest_paths(str_0, str_0)





#record_6
def test_case_1():

    str_0 = "i?>B!N#qEhei"

    module_0.shortest_paths(str_0, str_0)





#record_7
def test_case_2():

    str_0 = "i["

    str_1 = ""

    var_0 = module_0.shortest_paths(str_0, str_1)

    module_0.shortest_paths(str_0, var_0)





#record_8
def test_case_3():

    str_0 = "5\x0c"

    str_1 = ""

    tuple_0 = (str_1, str_1)

    var_0 = module_0.shortest_paths(tuple_0, str_1)

    var_1 = module_0.shortest_paths(str_0, var_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import shortest_paths as module_0





#record_9
def test_case_0():

    bytes_0 = b"y\xb2"

    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}

    module_0.shortest_paths(bytes_0, dict_0)





#record_10
def test_case_1():

    list_0 = []

    module_0.shortest_paths(list_0, list_0)



