# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import gcd as module_0





#record_1
def test_case_0():

    bool_0 = False

    var_0 = module_0.gcd(bool_0, bool_0)

    assert var_0 is False

    var_1 = module_0.gcd(bool_0, var_0)

    var_2 = module_0.gcd(var_0, var_1)

    var_3 = module_0.gcd(bool_0, bool_0)





#record_2
def test_case_1():

    bytes_0 = b"H\x1b"

    module_0.gcd(bytes_0, bytes_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import gcd as module_0





#record_3
def test_case_0():

    tuple_0 = ()

    list_0 = [tuple_0, tuple_0, tuple_0]

    bool_0 = False

    var_0 = module_0.gcd(list_0, bool_0)

    module_0.gcd(tuple_0, tuple_0)





#record_4
def test_case_1():

    bool_0 = True

    none_type_0 = None

    module_0.gcd(bool_0, none_type_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import gcd as module_0





#record_5
def test_case_0():

    bool_0 = False

    var_0 = module_0.gcd(bool_0, bool_0)

    assert var_0 is False

    none_type_0 = None

    module_0.gcd(none_type_0, none_type_0)





#record_6
def test_case_1():

    int_0 = -4146

    module_0.gcd(int_0, int_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import gcd as module_0

import builtins as module_1





#record_7
def test_case_0():

    bool_0 = False

    var_0 = module_0.gcd(bool_0, bool_0)

    assert var_0 is False

    object_0 = module_1.object()

    module_0.gcd(object_0, object_0)





#record_8
def test_case_1():

    int_0 = -2174

    module_0.gcd(int_0, int_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import gcd as module_0





#record_9
def test_case_0():

    bool_0 = False

    var_0 = module_0.gcd(bool_0, bool_0)

    assert var_0 is False

    bool_1 = False

    set_0 = {bool_1, bool_1}

    module_0.gcd(bool_1, set_0)





#record_10
def test_case_1():

    float_0 = -1022.735

    module_0.gcd(float_0, float_0)

