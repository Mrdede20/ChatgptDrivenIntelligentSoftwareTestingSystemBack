Yes, there are input cases that could cause the three implementations of `find_first_in_sorted` to return different outputs. 

Here's one possible test case:

```python
arr = [1, 2, 2, 3, 4, 4, 4, 5]
x = 4
```

With this input, the first implementation will return `4`, the second implementation will return `4`, and the third implementation will return `6`.

This is because the first implementation has an incorrect termination condition in the while loop (`lo < hi`), which causes it to exit prematurely and not check the final element of the array. The second implementation has a correct termination condition (`lo <= hi - 1`), but it could return a different index than the first implementation in cases where there are repeated elements in the array. The third implementation has a correct termination condition and correctly handles repeated elements in the array by adjusting the upper bound `hi`.