Yes, there exist inputs that make the output of the first two versions of `reverse_linked_list()` differ from the last version.

Here's an example input that would make the output differ:

```python
class Node:
    def __init__(self, val):
        self.val = val
        self.successor = None

node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node1.successor = node2
node2.successor = node3

# The original linked list is: 1 -> 2 -> 3

# The output of the first two versions of reverse_linked_list() would be: 3 -> 2 -> 1
# The output of the last version of reverse_linked_list() would be: 3 -> 2 -> 1 -> None
```

The first two versions of the function reverse the linked list in place, while the last version returns a reference to the head of the reversed list. The difference in behavior arises when the original linked list has been fully reversed and `node.successor` becomes `None`. In the first two versions, this is the signal to exit the loop and return `prevnode`. In the last version, however, the loop continues until `curr` becomes `None`, and then returns `prev`.