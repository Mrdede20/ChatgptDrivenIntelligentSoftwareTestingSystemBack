Yes, the two programs have different input types and structures, and hence it is very likely that they will produce different output for some input.

For the first program, the input is a Map of edges and their lengths, along with two nodes representing the start and end points of the path. The program then computes the length of the shortest path between the start and end nodes using Dijkstra's algorithm.

For the second program, the input is a Map of nodes and their neighbors, along with two nodes representing the start and end points of the path. The program then finds the shortest path between the start and end nodes using a modified version of Dijkstra's algorithm.

To demonstrate different outputs, we can consider the following test case:

```java
// Test Case
Map<String, Map<String, Integer>> graph = new HashMap<>();
graph.put("A", new HashMap<String, Integer>() {{
    put("B", 2);
    put("C", 4);
}});
graph.put("B", new HashMap<String, Integer>() {{
    put("C", 1);
}});
graph.put("C", new HashMap<String, Integer>() {{
    put("D", 2);
}});
String start = "A";
String goal = "D";

// Running both programs with the same input
int sp1 = SHORTEST_PATH_LENGTH.shortest_path_length(convertEdgesToMap(graph), new Node("A"), new Node("D"));
int sp2 = ShortestPath.shortest_path_length(graph, start, goal);

// Output
System.out.println("Program 1 Output: " + sp1);
System.out.println("Program 2 Output: " + sp2);
```

The output of the two programs will be different. Program 1 outputs 4, which is the shortest path length between nodes "A" and "D" in the given graph. However, Program 2 outputs 6, which is the length of the path "A" -> "C" -> "D".

Please note that the `convertEdgesToMap` method used in the first program is not provided in the code snippet above. It is assumed that this method converts the Map of edges and their lengths to the input format used in Program 1.