# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import subsequences as module_0





#record_1
def test_case_0():

    bool_0 = False

    var_0 = module_0.subsequences(bool_0, bool_0, bool_0)





#record_2
def test_case_1():

    bool_0 = True

    var_0 = module_0.subsequences(bool_0, bool_0, bool_0)





#record_3
def test_case_2():

    bool_0 = True

    int_0 = -4076

    var_0 = module_0.subsequences(int_0, bool_0, bool_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import subsequences as module_0





#record_4
def test_case_0():

    int_0 = 4191

    dict_0 = {int_0: int_0}

    bool_0 = False

    var_0 = module_0.subsequences(int_0, bool_0, bool_0)

    module_0.subsequences(dict_0, bool_0, dict_0)





#record_5
def test_case_1():

    none_type_0 = None

    module_0.subsequences(none_type_0, none_type_0, none_type_0)





#record_6
def test_case_2():

    int_0 = 4191

    dict_0 = {int_0: int_0}

    var_0 = module_0.subsequences(int_0, int_0, int_0)

    module_0.subsequences(dict_0, var_0, dict_0)





#record_7
def test_case_3():

    int_0 = -2484

    module_0.subsequences(int_0, int_0, int_0)





#record_8
def test_case_4():

    bool_0 = True

    bool_1 = True

    bool_2 = False

    var_0 = module_0.subsequences(bool_2, bool_1, bool_1)

    var_1 = module_0.subsequences(bool_0, bool_0, bool_0)

    module_0.subsequences(var_1, var_1, var_1)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import subsequences as module_0





#record_9
def test_case_0():

    bool_0 = False

    var_0 = module_0.subsequences(bool_0, bool_0, bool_0)





#record_10
def test_case_1():

    none_type_0 = None

    module_0.subsequences(none_type_0, none_type_0, none_type_0)



