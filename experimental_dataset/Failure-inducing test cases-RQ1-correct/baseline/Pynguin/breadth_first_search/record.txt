# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import breadth_first_search as module_0





#record_1
def test_case_0():

    int_0 = 2325

    var_0 = module_0.breadth_first_search(int_0, int_0)

    assert var_0 is True





#record_2
def test_case_1():

    bool_0 = True

    none_type_0 = None

    module_0.breadth_first_search(bool_0, none_type_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import breadth_first_search as module_0





#record_3
def test_case_0():

    none_type_0 = None

    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)

    assert var_0 is True





#record_4
def test_case_1():

    none_type_0 = None

    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)

    assert var_0 is True

    module_0.breadth_first_search(var_0, none_type_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import breadth_first_search as module_0





#record_5
def test_case_0():

    none_type_0 = None

    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)

    assert var_0 is True





#record_6
def test_case_1():

    complex_0 = 1848.7 + 4.3j

    bool_0 = False

    module_0.breadth_first_search(complex_0, bool_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import breadth_first_search as module_0





#record_7
def test_case_0():

    none_type_0 = None

    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)

    assert var_0 is True





#record_8
def test_case_1():

    float_0 = -917.0

    none_type_0 = None

    module_0.breadth_first_search(float_0, none_type_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import breadth_first_search as module_0





#record_9
def test_case_0():

    tuple_0 = ()

    var_0 = module_0.breadth_first_search(tuple_0, tuple_0)

    assert var_0 is True





#record_10
def test_case_1():

    int_0 = 1304

    set_0 = {int_0}

    module_0.breadth_first_search(int_0, set_0)

