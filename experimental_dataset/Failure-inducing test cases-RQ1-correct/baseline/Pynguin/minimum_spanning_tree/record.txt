# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import minimum_spanning_tree as module_0





#record_1
def test_case_0():

    bytes_0 = b"W*\x11s_wG\x92`-\xac\x1e\x02&\x83\x02^\xfc\xff"

    module_0.minimum_spanning_tree(bytes_0)





#record_2
def test_case_1():

    list_0 = []

    var_0 = module_0.minimum_spanning_tree(list_0)

    bool_0 = True

    dict_0 = {bool_0: bool_0, bool_0: bool_0}

    module_0.minimum_spanning_tree(dict_0)





#record_3
def test_case_2():

    bool_0 = False

    complex_0 = 932.4 - 1027.32j

    tuple_0 = (bool_0, complex_0)

    int_0 = 1957

    dict_0 = {tuple_0: bool_0, complex_0: bool_0, bool_0: int_0}

    module_0.minimum_spanning_tree(dict_0)





#record_4
def test_case_3():

    bool_0 = False

    complex_0 = 932.4 - 1027.32j

    tuple_0 = (bool_0, bool_0)

    int_0 = 1957

    dict_0 = {tuple_0: bool_0, complex_0: bool_0, bool_0: int_0}

    module_0.minimum_spanning_tree(dict_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import minimum_spanning_tree as module_0





#record_5
def test_case_0():

    bytes_0 = b"\xd2l"

    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}

    var_0 = module_0.minimum_spanning_tree(dict_0)





#record_6
def test_case_1():

    bool_0 = True

    module_0.minimum_spanning_tree(bool_0)





#record_7
def test_case_2():

    bytes_0 = b"\xa5\xa5"

    dict_0 = {

        bytes_0: bytes_0,

        bytes_0: bytes_0,

        bytes_0: bytes_0,

        bytes_0: bytes_0,

        bytes_0: bytes_0,

    }

    var_0 = module_0.minimum_spanning_tree(dict_0)

    module_0.minimum_spanning_tree(var_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import minimum_spanning_tree as module_0





#record_8
def test_case_0():

    str_0 = "3G"

    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}

    var_0 = module_0.minimum_spanning_tree(dict_0)





#record_9
def test_case_1():

    none_type_0 = None

    module_0.minimum_spanning_tree(none_type_0)





#record_10
def test_case_2():

    str_0 = ".."

    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}

    var_0 = module_0.minimum_spanning_tree(dict_0)

