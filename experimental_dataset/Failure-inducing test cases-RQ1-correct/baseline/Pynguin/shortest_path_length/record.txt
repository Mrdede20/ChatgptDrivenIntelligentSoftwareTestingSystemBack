# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import shortest_path_length as module_0

import heapq as module_1





#record_1
def test_case_0():

    float_0 = -1113.0

    dict_0 = module_0.shortest_path_length(float_0, float_0, float_0)

    assert dict_0 == 0





#record_2
def test_case_1():

    none_type_0 = None

    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)

    assert var_0 == 0

    set_0 = {var_0, none_type_0}

    module_0.get(set_0, set_0)





#record_3
def test_case_2():

    tuple_0 = ()

    var_0 = module_0.get(tuple_0, tuple_0)

    assert var_0 == 0

    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)

    assert var_1 == 0

    module_0.shortest_path_length(var_0, var_0, tuple_0)





#record_4
def test_case_3():

    none_type_0 = None

    module_0.insert_or_update(none_type_0, none_type_0)





#record_5
def test_case_4():

    float_0 = -1113.0

    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)

    assert var_0 == 0

    module_0.shortest_path_length(float_0, float_0, var_0)





#record_6
def test_case_5():

    int_0 = 1985

    tuple_0 = (int_0, int_0)

    dict_0 = {tuple_0: tuple_0}

    var_0 = module_0.get(dict_0, dict_0)

    assert var_0 == 0

    var_1 = module_0.get(dict_0, var_0)

    assert var_1 == 0





#record_7
def test_case_6():

    int_0 = 1978

    tuple_0 = (int_0, int_0)

    module_0.insert_or_update(tuple_0, tuple_0)





#record_8
def test_case_7():

    bytes_0 = b"\x88\xa5"

    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)

    assert var_0 == 0

    int_0 = 1947

    dict_0 = module_1.merge(key=int_0, reverse=int_0)

    var_1 = module_0.get(dict_0, dict_0)

    assert var_1 == 0

    module_0.insert_or_update(dict_0, bytes_0)





#record_9
def test_case_8():

    int_0 = 1978

    tuple_0 = (int_0, int_0)

    dict_0 = {tuple_0: tuple_0}

    var_0 = module_0.insert_or_update(dict_0, tuple_0)

    dict_1 = {}

    module_0.insert_or_update(int_0, dict_1)





#record_10
def test_case_9():

    bytes_0 = b"\x88\xa5"

    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)

    assert var_0 == 0

    tuple_0 = (var_0, var_0)

    dict_0 = {bytes_0: tuple_0, tuple_0: tuple_0, bytes_0: tuple_0, tuple_0: var_0}

    var_1 = module_0.get(dict_0, dict_0)

    assert var_1 == 0

    var_2 = module_0.insert_or_update(dict_0, tuple_0)

    float_0 = -5318.0

    module_0.shortest_path_length(tuple_0, float_0, var_0)



