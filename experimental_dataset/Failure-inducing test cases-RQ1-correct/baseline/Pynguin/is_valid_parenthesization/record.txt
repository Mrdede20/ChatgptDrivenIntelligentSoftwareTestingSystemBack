# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import is_valid_parenthesization as module_0

import builtins as module_1





#record_1
def test_case_0():

    bytes_0 = b"co\r,q"

    var_0 = module_0.is_valid_parenthesization(bytes_0)

    assert var_0 is False





#record_2
def test_case_1():

    str_0 = "\\DS.}oyJN:N"

    var_0 = module_0.is_valid_parenthesization(str_0)

    assert var_0 is False

    set_0 = set()

    var_1 = module_0.is_valid_parenthesization(set_0)

    assert var_1 is True

    var_2 = module_0.is_valid_parenthesization(str_0)

    assert var_2 is False

    bool_0 = False

    module_0.is_valid_parenthesization(bool_0)





#record_3
def test_case_2():

    str_0 = "("

    var_0 = module_0.is_valid_parenthesization(str_0)

    assert var_0 is False

    var_1 = module_1.object()

    var_2 = module_1.object()

    bool_0 = False

    module_0.is_valid_parenthesization(bool_0)





#record_4
def test_case_3():

    str_0 = "(*W#o%.R\nQ|EN/"

    var_0 = module_0.is_valid_parenthesization(str_0)

    assert var_0 is False

    bool_0 = True

    module_0.is_valid_parenthesization(bool_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import is_valid_parenthesization as module_0





#record_5
def test_case_0():

    str_0 = "08N5a=^"

    var_0 = module_0.is_valid_parenthesization(str_0)

    assert var_0 is False





#record_6
def test_case_1():

    dict_0 = {}

    var_0 = module_0.is_valid_parenthesization(dict_0)

    assert var_0 is True





#record_7
def test_case_2():

    bool_0 = True

    module_0.is_valid_parenthesization(bool_0)





#record_8
def test_case_3():

    str_0 = "(LG"

    var_0 = module_0.is_valid_parenthesization(str_0)

    assert var_0 is False


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import is_valid_parenthesization as module_0

import builtins as module_1





#record_9
def test_case_0():

    str_0 = "nejaOwbhxrR"

    var_0 = module_0.is_valid_parenthesization(str_0)

    assert var_0 is False





#record_10
def test_case_1():

    list_0 = []

    var_0 = module_0.is_valid_parenthesization(list_0)

    assert var_0 is True



