# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import levenshtein as module_0

import builtins as module_1





#record_1
def test_case_0():

    str_0 = "Cu7\x0cD$&"

    var_0 = module_0.levenshtein(str_0, str_0)

    assert var_0 == 0

    bool_0 = True

    module_0.levenshtein(bool_0, bool_0)





#record_2
def test_case_1():

    int_0 = 810

    module_1.object(*int_0)





#record_3
def test_case_2():

    str_0 = "9h,j\\sz^=x"

    list_0 = [str_0, str_0, str_0, str_0]

    bool_0 = False

    tuple_0 = (str_0, list_0, bool_0)

    module_0.levenshtein(tuple_0, str_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import levenshtein as module_0





#record_4
def test_case_0():

    str_0 = "J/B|\x0cu-ej9X"

    var_0 = module_0.levenshtein(str_0, str_0)

    assert var_0 == 0

    none_type_0 = None

    module_0.levenshtein(none_type_0, none_type_0)





#record_5
def test_case_1():

    dict_0 = {}

    module_0.levenshtein(dict_0, dict_0)





#record_6
def test_case_2():

    bool_0 = False

    str_0 = "gLW<@MaaZxk,b6dAb/"

    list_0 = [bool_0, bool_0, str_0, bool_0]

    module_0.levenshtein(list_0, list_0)





#record_7
def test_case_3():

    str_0 = "iA"

    str_1 = "wK"

    var_0 = module_0.levenshtein(str_1, str_0)

    assert var_0 == 2

    module_0.levenshtein(var_0, str_0)





#record_8
def test_case_4():

    bytes_0 = b'\xd0S\xab\x07a\x9c1_"\xf4c'

    list_0 = [bytes_0, bytes_0, bytes_0]

    tuple_0 = (list_0,)

    list_1 = [tuple_0, list_0]

    module_0.levenshtein(list_1, tuple_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import levenshtein as module_0





#record_9
def test_case_0():

    str_0 = "}}u`9"

    var_0 = module_0.levenshtein(str_0, str_0)

    assert var_0 == 0





#record_10
def test_case_1():

    none_type_0 = None

    module_0.levenshtein(none_type_0, none_type_0)




