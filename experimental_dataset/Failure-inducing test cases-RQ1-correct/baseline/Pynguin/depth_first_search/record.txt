# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import depth_first_search as module_0





#record_1
def test_case_0():

    bytes_0 = b"\xe4O\x9d\x96\x84wG"

    var_0 = module_0.depth_first_search(bytes_0, bytes_0)

    assert var_0 is True





#record_2
def test_case_1():

    none_type_0 = None

    list_0 = [none_type_0, none_type_0]

    module_0.depth_first_search(none_type_0, list_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import depth_first_search as module_0





#record_3
def test_case_0():

    bool_0 = True

    var_0 = module_0.depth_first_search(bool_0, bool_0)

    assert var_0 is True





#record_4
def test_case_1():

    bytes_0 = b".\x0cz\xaf{zI\xa2"

    none_type_0 = None

    module_0.depth_first_search(bytes_0, none_type_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import builtins as module_0

import depth_first_search as module_1





#record_5
def test_case_0():

    object_0 = module_0.object()

    var_0 = module_1.depth_first_search(object_0, object_0)

    assert var_0 is True





#record_6
def test_case_1():

    str_0 = "X./{=~"

    none_type_0 = None

    module_1.depth_first_search(none_type_0, str_0)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import depth_first_search as module_0





#record_7
def test_case_0():

    str_0 = "iG+1h@V84x`{\rW<"

    var_0 = module_0.depth_first_search(str_0, str_0)

    assert var_0 is True





#record_8
def test_case_1():

    set_0 = set()

    set_1 = set()

    module_0.depth_first_search(set_0, set_1)


# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).

# Please check them before you use them.

import depth_first_search as module_0





#record_9
def test_case_0():

    bool_0 = True

    var_0 = module_0.depth_first_search(bool_0, bool_0)

    assert var_0 is True





#record_10
def test_case_1():

    float_0 = -1143.12

    var_0 = module_0.depth_first_search(float_0, float_0)

    assert var_0 is True

    none_type_0 = None

    var_1 = module_0.depth_first_search(none_type_0, none_type_0)

    assert var_1 is True

    bool_0 = False

    module_0.depth_first_search(none_type_0, bool_0)

