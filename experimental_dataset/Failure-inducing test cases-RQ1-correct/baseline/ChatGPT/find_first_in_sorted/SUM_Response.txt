#PT
arr = [1, 2, 3, 3, 4, 5, 6]
assert find_first_in_sorted(arr, 3) == 2

#PT
arr = [1, 2, 3, 4, 4, 4, 5, 6, 7]
assert find_first_in_sorted(arr, 4) == 3

#PT
arr = [10, 20, 30, 40, 50]
x = 60
result = find_first_in_sorted(arr, x)
assert result == -1, f"Expected -1 but got {result}"

#PT
arr = [1, 2, 4, 4, 4, 5, 7, 9]
x = 4
expected_output = 2
assert find_first_in_sorted(arr, x) == expected_output

#PT
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
x = 5
assert find_first_in_sorted(arr, x) == 4

#PT
arr = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6]
x = 4
expected_index = 4
assert find_first_in_sorted(arr, x) == expected_index, f"Expected {expected_index} but got {find_first_in_sorted(arr, x)}"

#PT
arr = [1, 3, 5, 7, 9, 11]
assert find_first_in_sorted(arr, 5) == 2

#PT
arr = [1, 2, 3, 4, 4, 4, 5, 5, 6]
assert(find_first_in_sorted(arr, 4) == 3)

#PT
arr = [1, 2, 2, 3, 4, 5]
x = 2
assert find_first_in_sorted(arr, x) == 1

#PT
arr = [5, 3, 1, 4, 2]
x = 3
assert find_first_in_sorted(arr, x) == -1