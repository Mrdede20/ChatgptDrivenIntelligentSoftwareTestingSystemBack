#FF
test_weight_by_edge = {
    (0, 1): 5,
    (0, 2): 2,
    (1, 2): 1,
    (1, 3): 3,
    (2, 3): 6,
    (2, 4): 4,
    (3, 4): 2
}

assert shortest_paths(0, test_weight_by_edge) == {
    0: 0,
    1: 5,
    2: 2,
    3: 8,
    4: 10
}

#FF
weight_by_edge = {
    (0, 1): 3,
    (0, 3): 2,
    (1, 2): 1,
    (1, 3): 4,
    (2, 4): 6,
    (3, 1): 2,
    (3, 2): 5,
    (3, 4): 7,
    (4, 0): 3,
    (4, 2): 4,
}
assert shortest_paths(0, weight_by_edge) == {0: 0, 1: 3, 2: 4, 3: 2, 4: 6}

#PT
graph = {
    ('A', 'B'): 10,
    ('B', 'C'): 5,
    ('C', 'D'): 7,
    ('D', 'E'): 3,
    ('A', 'C'): 20,
    ('B', 'D'): 15,
    ('C', 'E'): 10
}
assert shortest_paths('A', graph) == {'A': 0, 'B': 10, 'C': 15, 'D': 22, 'E': 25}

#PT
weight_by_edge = {
    ('a', 'b'): 10,
    ('a', 'c'): 15,
    ('b', 'c'): 5,
}
source = 'a'
result = shortest_paths(source, weight_by_edge)
assert result == {'a': 0, 'b': 10, 'c': 15}, f"Error: {result}"

#FF
assert shortest_paths(0, {(0, 1): 5, (0, 2): 3, (1, 2): 2, (1, 3): 6, (2, 3): 7}) == {0: 0, 1: 5, 2: 3, 3: 7}

#PT
weight_by_edge = {
    (0, 1): 1,
    (0, 2): 3,
    (1, 2): 1,
    (2, 3): 2,
    (1, 3): 4
}
assert shortest_paths(0, weight_by_edge) == {0: 0, 1: 1, 2: 2, 3: 4}

#PT
source = 'A'
weight_by_edge = {('A', 'B'): 1, ('B', 'C'): 2, ('C', 'D'): 3}
expected_output = {'A': 0, 'B': 1, 'C': 3, 'D': 6}
assert shortest_paths(source, weight_by_edge) == expected_output

#FF
source = 0
weight_by_edge = {(0, 1): 4, (0, 2): 1, (1, 2): 2, (1, 3): 5, (2, 3): 1, (3, 4): 3}
assert shortest_paths(source, weight_by_edge) == {0: 0, 1: 3, 2: 1, 3: 2, 4: 5}

#PT
weight_by_edge = {
    (1, 2): 5,
    (1, 3): 2,
    (2, 3): 1,
    (2, 4): 1,
    (3, 4): 4,
}
source = 1
expected_output = {
    1: 0,
    2: 5,
    3: 2,
    4: 6,
}
assert shortest_paths(source, weight_by_edge) == expected_output

#FF
weight_by_edge = {
    (0, 1): 5,
    (0, 2): 3,
    (1, 2): 1,
    (1, 3): 4,
    (2, 3): 3,
    (2, 4): 5,
    (3, 4): 2
}
assert shortest_paths(0, weight_by_edge) == {0: 0, 1: 5, 2: 3, 3: 9, 4: 7}