#FF
graph = {
    (1, 2): 1,
    (1, 3): 2,
    (2, 3): 3,
    (2, 4): 1,
    (3, 4): 2,
    (3, 5): 3,
    (4, 5): 1
}
expected_output = {(1, 2), (2, 4), (3, 4), (4, 5), (1, 3)}
assert minimum_spanning_tree(graph) == expected_output

#PT
weight_by_edge = {('A', 'B'): 2, ('B', 'C'): 3, ('A', 'C'): 1, ('C', 'D'): 4}
actual_mst_edges = minimum_spanning_tree(weight_by_edge)
expected_mst_edges = {('A', 'B'), ('A', 'C'), ('C', 'D')}
assert actual_mst_edges == expected_mst_edges

#PT
graph = {
    (1, 2): 1,
    (1, 3): 4,
    (2, 3): 2,
    (2, 4): 3,
    (3, 4): 5,
    (3, 5): 1,
    (4, 5): 6
}
mst = minimum_spanning_tree(graph)
assert mst == {(1, 2), (2, 3), (2, 4), (3, 5)}

#IT
graph = {}
graph["A"] = {"B": 2, "C": 3}
graph["B"] = {"A": 2, "C": 4, "D": 3}
graph["C"] = {"A": 3, "B": 4, "D": 5}
graph["D"] = {"B": 3, "C": 5}
mst = minimum_spanning_tree(graph)
assert ('A', 'B') in mst


#FF
weight_by_edge = {('A', 'B'): 4, ('A', 'H'): 8, ('B', 'C'): 8,
                    ('B', 'H'): 11, ('C', 'D'): 7, ('C', 'F'): 4,
                    ('C', 'I'): 2, ('D', 'E'): 9, ('D', 'F'): 14,
                    ('E', 'F'): 10, ('F', 'G'): 2, ('G', 'H'): 1,
                    ('G', 'I'): 6, ('H', 'I'): 7}
expected_mst_edges = {('A', 'B'), ('A', 'H'), ('C', 'I'), ('C', 'F'),
                        ('D', 'C'), ('F', 'G'), ('H', 'G'), ('E', 'D')}

mst_edges = minimum_spanning_tree(weight_by_edge)
assert mst_edges == expected_mst_edges, f"Expected {expected_mst_edges}, but got {mst_edges}"

#IT
weight_by_edge = {'A-B': 7, 'A-D': 5, 'B-C': 8, 'B-D': 9, 'B-E': 7, 'C-E': 5, 'D-E': 15, 'D-F': 6, 'E-F': 8, 'E-G': 9, 'F-G': 11}
expected_output = {('A', 'D'), ('A', 'B'), ('B', 'E'), ('C', 'E'), ('D', 'F'), ('E', 'G')}
result = minimum_spanning_tree(weight_by_edge)
assert result == expected_output, f"Failed - Expected: {expected_output}, Actual: {result}"

#FF
graph = {(1,2):2, (2,3):5, (1,3):1, (2,4):3, (3,4):0}
mst = minimum_spanning_tree(graph)
expected_output = {(1, 3), (3, 4), (1, 2), (2, 4)}
assert mst == expected_output

#PT
graph = {(0, 1): 1, (0, 3): 3, (1, 2): 2, (2, 3): 4, (2, 4): 5, (3, 4): 6}
mst = minimum_spanning_tree(graph)
assert mst == {(0, 1), (1, 2), (0, 3), (2, 4)}

#PT
weight_by_edge = {('A', 'B'): 1, ('B', 'C'): 2, ('C', 'D'): 3, ('A', 'D'): 4, ('B', 'D'): 5}
expected_mst_edges = {('A', 'B'), ('B', 'C'), ('C', 'D')}
assert minimum_spanning_tree(weight_by_edge) == expected_mst_edges

#PT
weight_by_edge = {(1,2): 5, 
                  (1,3): 3,
                  (2,3): 4,
                  (3,4): 9,
                  (1,4): 2}
mst = minimum_spanning_tree(weight_by_edge)
assert mst == {(1, 4), (1, 3), (2, 3)}