#FF
assert list(kheapsort([4, 1, 7, 3, 9, 2, 8], 3)) == [3, 4, 7, 8, 9]

#PT
arr1 = [1,2,3,4,5,6,7,8,9]
k1 = 3
assert list(kheapsort(arr1, k1)) == [1,2,3,4,5,6,7,8,9]

#FF
arr = [5, 3, 8, 4, 2, 1, 7, 6]
k = 3
expected_output = [3, 4, 5, 6, 7, 8]
actual_output = list(kheapsort(arr, k))
assert actual_output == expected_output, f"Error: Expected {expected_output}, but got {actual_output}"

#FF
arr = [10, 6, 3, 7, 8, 9]
k = 3
expected_result = [7, 8, 9, 10, 6, 3]
assert list(kheapsort(arr, k)) == expected_result

#FF
arr = [10, 5, 3, 8, 7]
assert list(kheapsort(arr, 2)) == [5, 7, 8, 10, 3]

#FF
arr = [3, 1, 4, 1, 5, 9, 2]
expected = sorted(arr)
assert list(kheapsort(arr, 2)) == expected

#FF
arr = [3, 5, 2, 8, 1, 9, 7, 6, 4]
k = 3
expected_output = [2, 3, 4, 5, 6, 7, 8, 9]
assert list(kheapsort(arr, k)) == expected_output

#PT
arr = [3, 1, 4, 1, 5, 9, 2, 6]
k = 4
expected_result = [1, 1, 2, 3, 4, 5, 6, 9]
result = list(kheapsort(arr, k))
assert result == expected_result, f"Expected {expected_result}, but got {result}"

#FF
arr = [9, 3, 2, 1, 10]
k = 3
assert list(kheapsort(arr, k)) == [2, 3, 1, 9, 10]

#FF
arr1 = [3, 5, 2, 6, 7, 8, 1, 0, 4, 9]
k1 = 4
result1 = list(kheapsort(arr1, k1))
assert result1 == [3, 2, 1, 0, 4, 5, 6, 7, 8, 9], "Test case 1 failed"